# Group

## Group list

```shell
curl "<%= config[:endpoint] %>/group/list" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "created_by": 1,
      "active": true,
      "direct_join": false,
      "name": "Flowback",
      "description": "Flowing seamlessly",
      "image": "https://example.com/media/image.png",
      "cover_image": "https://example.com/media/banner.png",
      "joined": true
    },
    ...
  ]
}
```

Lists all available groups to join or request invite for

### HTTP Request
`GET <%= config[:endpoint] %>/group/list`

### Query Parameters
| Parameter                         | Notes                                                   |
|-----------------------------------|---------------------------------------------------------|
| `id` *int, optional*              |                                                         |
| `name` *str, optional*            | Must be exact                                           |
| `name__icontains` *str, optional* | `name` contains, case-insensitive                       |
| `direct_join` *bool, optional*    | Determines if users can join directly or require invite |
| `joined` *bool, optional*         | User joined the group or not                            |


## Group detail

```shell
curl "<%= config[:endpoint] %>/group/1/detail" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": {
    "id": 1,
    "created_by": 1,
    "active": true,
    "direct_join": false,
    "public": true,
    "default_permission": 3,
    "name": "Flowback",
    "description": "Flowing seamlessly",
    "image": "https://example.com/media/image.png",
    "cover_image": "https://example.com/media/banner.png",
    "jitsi_room": "https://meet.example.com/ABC123"
  }
}
```

Lists all available groups to join or request invite for

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/detail`


## Group create

```shell
curl "<%= config[:endpoint] %>/group/create" \
-H "Authorization: your_token_here" \
-F "name=Flowback" \
-F "description=Flowing seamlessly" \
-F "image=@image.png" \
-F "cover_image=@banner_image.png" \
-F "direct_join=true" \
-F "public=true"
```

Creates a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/create`

### Query Parameters
| Parameter             | Notes                                                   |
|-----------------------|---------------------------------------------------------|
| `name` *int*          | Name of the group                                       |
| `description` *str*   | Description of the group                                |
| `image` *img*         | Image of the group                                      |
| `cover_image` *img*   | Banner image of the group                               |
| `direct_join` *bool*  | Determines if users can join directly or require invite |
| `public` *bool*       | Determines the visibility of the group                  |


## Group update

```shell
curl "<%= config[:endpoint] %>/group/update" \
-H "Authorization: your_token_here" \
-F "name=Flowback" \
-F "description=Flowing seamlessly" \
-F "image=@image.png" \
-F "cover_image=@banner_image.png" \
-F "direct_join=true" \
-F "public=true" \
-F "default_permission=1"
```

Updates a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/update`

### Query Parameters
| Parameter                            | Notes                                                                           |
|--------------------------------------|---------------------------------------------------------------------------------|
| `name` *int, optional*               | Name of the group                                                               |
| `description` *str, optional*        | Description of the group                                                        |
| `image` *img, optional*              | Image of the group                                                              |
| `cover_image` *img, optional*        | Banner image of the group                                                       |
| `direct_join` *bool, optional*       | Determines if users can join directly or require invite                         |
| `public` *bool, optional*            | Determines the visibility of the group                                          |
| `default_permission` *int, optional* | Sets the default permissions for users, allows null value for basic permissions |


## Group delete

```shell
curl "<%= config[:endpoint] %>/group/delete" \
-H "Authorization: your_token_here"
```

Deletes a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/delete`


## Group users list

```shell
curl "<%= config[:endpoint] %>/group/1/users" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "user_id": 1,
      "username": "User",
      "profile_image": "https://example.com/media/image.png",
      "banner_image": "https://example.com/media/banner.png",
      "delegate": 2,
      "permission_id": 1,
      "permission_name": "Bakery"
    }
  ],
  ...
}
```

Lists all users in the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/users`

### Query Parameters
| Parameter                             | Notes                                |
|---------------------------------------|--------------------------------------|
| `group_user_id` *int, optional*       | Unique identifier for the group user |
| `user_id` *int, optional*             |                                      |
| `username__icontains` *str, optional* | Username contains (case-insensitive) |
| `delegate` *bool, optional*           | Whether user is a delegate or not    |
| `is_admin` *bool, optional*           |                                      |
| `permission` *int, optional*          | The permission ID of the user        |


## Group join

```shell
curl "<%= config[:endpoint] %>/group/<id>/join" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": "join"
}
```

Join a group, this will return either "join", or "invite" depending on the group settings

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/join`


## Group leave

```shell
curl "<%= config[:endpoint] %>/group/<id>/leave" \
-H "Authorization: your_token_here"
```

Leaves a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/leave`


## Group user invite

```shell
curl "<%= config[:endpoint] %>/group/<id>/invite" \
-H "Authorization: your_token_here"
```

Invites a user

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/leave`

### Query Parameters
| Parameter  | Notes                  |
|------------|------------------------|
| `to` *int* | The user to be invited |


## Group invite accept

```shell
curl "<%= config[:endpoint] %>/group/<id>/invite/accept" \
-H "Authorization: your_token_here"
```

User accepts a group invite

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/invite/accept`


## Group invite reject

```shell
curl "<%= config[:endpoint] %>/group/<id>/invite/reject" \
-H "Authorization: your_token_here"
```

User rejects a group invite

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/invite/reject`


## Group permission list

```shell
curl "<%= config[:endpoint] %>/group/1/permissions" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "role_name": "Neko",
      "invite_user": true,
      "create_poll": true,
      "allow_vote": false,
      "kick_members": false,
      "ban_members": true
    }
  ],
  ...
}
```

Lists all permissions for the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/permissions`

### Query Parameters
| Parameter                              | Notes                                          |
|----------------------------------------|------------------------------------------------|
| `id` *int, optional*                   |                                                |
| `role_name` *str, optional*            | The name of the role, must be exact            |
| `role_name__icontains` *str, optional* | role name contains contains (case-insensitive) |


## Group permission create

```shell
curl "<%= config[:endpoint] %>/group/<id>/permission/create" \
-H "Authorization: your_token_here" \
-d "role_name=Neko" \
-d "invite_user=true" \
-d "create_poll=true" \
-d "allow_vote=false" \
-d "kick_members=false" \
-d "ban_members=true"
```

Creates a permission for the group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/permission/create`

### Query Parameters
| Parameter             | Notes                      |
|-----------------------|----------------------------|
| `role_name` *str*     |                            |
| `invite_user` *bool*  | Allow role to invite users |
| `create_poll` *bool*  | Allow role to create polls |
| `allow_vote` *bool*   | Allow role to vote         |
| `kick_members` *bool* | Allow role to kick members |
| `ban_members` *bool*  | Allow role to ban members  |


## Group permission update

```shell
curl "<%= config[:endpoint] %>/group/<id>/permission/update" \
-H "Authorization: your_token_here" \
-d "permission_id=1" \
-d "role_name=Neko" \
-d "invite_user=true" \
-d "create_poll=true" \
-d "allow_vote=false" \
-d "kick_members=false" \
-d "ban_members=true"
```

Updates a permission for the group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/permission/update`

### Query Parameters
| Parameter                       | Notes                        |
|---------------------------------|------------------------------|
| `permission_id` *int*           | The permission to be updated |
| `role_name` *str, optional*     |                              |
| `invite_user` *bool, optional*  | Allow role to invite users   |
| `create_poll` *bool, optional*  | Allow role to create polls   |
| `allow_vote` *bool, optional*   | Allow role to vote           |
| `kick_members` *bool, optional* | Allow role to kick members   |
| `ban_members` *bool, optional*  | Allow role to ban members    |


## Group permission delete

```shell
curl "<%= config[:endpoint] %>/group/<id>/permission/delete" \
-H "Authorization: your_token_here"
```

Deletes a permission for the group, this will set all users associated with the permission to group default

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/permission/delete`

### Query Parameters
| Parameter                       | Notes                        |
|---------------------------------|------------------------------|
| `permission_id` *int*           | The permission to be deleted |



