# Group

## Group list

```shell
curl "<%= config[:endpoint] %>/group/list" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "created_by": 1,
      "active": true,
      "direct_join": false,
      "name": "Flowback",
      "description": "Flowing seamlessly",
      "image": "https://example.com/media/image.png",
      "cover_image": "https://example.com/media/banner.png",
      "joined": true
    }
  ]
}
```

Lists all available groups to join or request invite for

### HTTP Request
`GET <%= config[:endpoint] %>/group/list`

### Query Parameters
| Parameter                         | Notes                                                   |
|-----------------------------------|---------------------------------------------------------|
| `id` *int, optional*              |                                                         |
| `name` *str, optional*            | Must be exact                                           |
| `name__icontains` *str, optional* | `name` contains, case-insensitive                       |
| `direct_join` *bool, optional*    | Determines if users can join directly or require invite |
| `joined` *bool, optional*         | User joined the group or not                            |


## Group detail

```shell
curl "<%= config[:endpoint] %>/group/1/detail" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": {
    "id": 1,
    "created_by": 1,
    "active": true,
    "direct_join": false,
    "public": true,
    "default_permission": 3,
    "name": "Flowback",
    "description": "Flowing seamlessly",
    "image": "https://example.com/media/image.png",
    "cover_image": "https://example.com/media/banner.png",
    "jitsi_room": "https://meet.example.com/ABC123"
  }
}
```

Lists all available groups to join or request invite for

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/detail`


## Group create

```shell
curl "<%= config[:endpoint] %>/group/create" \
-H "Authorization: your_token_here" \
-F "name=Flowback" \
-F "description=Flowing seamlessly" \
-F "image=@image.png" \
-F "cover_image=@banner_image.png" \
-F "direct_join=true" \
-F "public=true"
```

Creates a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/create`

### Query Parameters
| Parameter             | Notes                                                   |
|-----------------------|---------------------------------------------------------|
| `name` *int*          | Name of the group                                       |
| `description` *str*   | Description of the group                                |
| `image` *img*         | Image of the group                                      |
| `cover_image` *img*   | Banner image of the group                               |
| `direct_join` *bool*  | Determines if users can join directly or require invite |
| `public` *bool*       | Determines the visibility of the group                  |


## Group update

```shell
curl "<%= config[:endpoint] %>/group/1/update" \
-H "Authorization: your_token_here" \
-F "name=Flowback" \
-F "description=Flowing seamlessly" \
-F "image=@image.png" \
-F "cover_image=@banner_image.png" \
-F "direct_join=true" \
-F "public=true" \
-F "default_permission=1"
```

Updates a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/update`

### Query Parameters
| Parameter                            | Notes                                                                           |
|--------------------------------------|---------------------------------------------------------------------------------|
| `name` *int, optional*               | Name of the group                                                               |
| `description` *str, optional*        | Description of the group                                                        |
| `image` *img, optional*              | Image of the group                                                              |
| `cover_image` *img, optional*        | Banner image of the group                                                       |
| `direct_join` *bool, optional*       | Determines if users can join directly or require invite                         |
| `public` *bool, optional*            | Determines the visibility of the group                                          |
| `default_permission` *int, optional* | Sets the default permissions for users, allows null value for basic permissions |


## Group delete

```shell
curl "<%= config[:endpoint] %>/group/1/delete" \
-H "Authorization: your_token_here"
```

Deletes a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/delete`


## Group users list

```shell
curl "<%= config[:endpoint] %>/group/1/users" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "user_id": 1,
      "username": "User",
      "profile_image": "https://example.com/media/image.png",
      "banner_image": "https://example.com/media/banner.png",
      "delegate": true,
      "permission_id": 1,
      "permission_name": "Bakery"
    }
  ]
}
```

Lists all users in the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/users`

### Query Parameters
| Parameter                             | Notes                                |
|---------------------------------------|--------------------------------------|
| `group_user_id` *int, optional*       | Unique identifier for the group user |
| `user_id` *int, optional*             |                                      |
| `username__icontains` *str, optional* | Username contains (case-insensitive) |
| `delegate` *bool, optional*           | Whether user is a delegate or not    |
| `is_admin` *bool, optional*           |                                      |
| `permission` *int, optional*          | The permission ID of the user        |


## Group join

```shell
curl "<%= config[:endpoint] %>/group/1/join" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": "join"
}
```

Join a group, this will return either "join", or "invite" depending on the group settings

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/join`


## Group leave

```shell
curl "<%= config[:endpoint] %>/group/1/leave" \
-H "Authorization: your_token_here"
```

Leaves a group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/leave`


## Group user invite

```shell
curl "<%= config[:endpoint] %>/group/1/invite" \
-H "Authorization: your_token_here"
```

Invites a user

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/invite`

### Query Parameters
| Parameter  | Notes                  |
|------------|------------------------|
| `to` *int* | The user to be invited |


## Group invite accept

```shell
curl "<%= config[:endpoint] %>/group/1/invite/accept" \
-H "Authorization: your_token_here"
```

User accepts a group invite

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/invite/accept`


## Group invite reject

```shell
curl "<%= config[:endpoint] %>/group/1/invite/reject" \
-H "Authorization: your_token_here"
```

User rejects a group invite

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/invite/reject`


## Group permission list

```shell
curl "<%= config[:endpoint] %>/group/1/permissions" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "role_name": "Neko",
      "invite_user": true,
      "create_poll": true,
      "allow_vote": false,
      "kick_members": false,
      "ban_members": true
    }
  ]
}
```

Lists all permissions for the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/permissions`

### Query Parameters
| Parameter                              | Notes                                          |
|----------------------------------------|------------------------------------------------|
| `id` *int, optional*                   |                                                |
| `role_name` *str, optional*            | The name of the role, must be exact            |
| `role_name__icontains` *str, optional* | role name contains contains (case-insensitive) |


## Group permission create

```shell
curl "<%= config[:endpoint] %>/group/1/permission/create" \
-H "Authorization: your_token_here" \
-d "role_name=Neko" \
-d "invite_user=true" \
-d "create_poll=true" \
-d "allow_vote=false" \
-d "kick_members=false" \
-d "ban_members=true"
```

Creates a permission for the group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/permission/create`

### Query Parameters
| Parameter             | Notes                      |
|-----------------------|----------------------------|
| `role_name` *str*     |                            |
| `invite_user` *bool*  | Allow role to invite users |
| `create_poll` *bool*  | Allow role to create polls |
| `allow_vote` *bool*   | Allow role to vote         |
| `kick_members` *bool* | Allow role to kick members |
| `ban_members` *bool*  | Allow role to ban members  |


## Group permission update

```shell
curl "<%= config[:endpoint] %>/group/1/permission/update" \
-H "Authorization: your_token_here" \
-d "permission_id=1" \
-d "role_name=Neko" \
-d "invite_user=true" \
-d "create_poll=true" \
-d "allow_vote=false" \
-d "kick_members=false" \
-d "ban_members=true"
```

Updates a permission for the group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/permission/update`

### Query Parameters
| Parameter                       | Notes                        |
|---------------------------------|------------------------------|
| `permission_id` *int*           | The permission to be updated |
| `role_name` *str, optional*     |                              |
| `invite_user` *bool, optional*  | Allow role to invite users   |
| `create_poll` *bool, optional*  | Allow role to create polls   |
| `allow_vote` *bool, optional*   | Allow role to vote           |
| `kick_members` *bool, optional* | Allow role to kick members   |
| `ban_members` *bool, optional*  | Allow role to ban members    |


## Group permission delete

```shell
curl "<%= config[:endpoint] %>/group/1/permission/delete" \
-H "Authorization: your_token_here"
```

Deletes a permission for the group, this will set all users associated with the permission to group default

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/permission/delete`

### Query Parameters
| Parameter                       | Notes                        |
|---------------------------------|------------------------------|
| `permission_id` *int*           | The permission to be deleted |


## Group tags list

```shell
curl "<%= config[:endpoint] %>/group/1/tags" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "tag_name": "Neko",
      "active": true
    }
  ]
}
```

Lists all tags for the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/tags`

### Query Parameters
| Parameter                             | Notes                                |
|---------------------------------------|--------------------------------------|
| `id` *int, optional*                  |                                      |
| `tag_name` *str, optional*            | The name of the tag, must be exact   |
| `tag_name__icontains` *str, optional* | Tag name contains (case-insensitive) |
| `active` *bool, optional*             | Whether the tag is available or not  |


## Group tag create

```shell
curl "<%= config[:endpoint] %>/group/1/tag/create" \
-H "Authorization: your_token_here" \
-d "tag_name=Neko"
```

Creates a tag for the group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/tag/create`

### Query Parameters
| Parameter        | Notes               |
|------------------|---------------------|
| `tag_name` *str* | The name of the tag |


## Group tag update

```shell
curl "<%= config[:endpoint] %>/group/1/tag/update" \
-H "Authorization: your_token_here" \
-d "id=1" \
-d "active=false"
```

Updates a tag for the group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/tag/update`

### Query Parameters
| Parameter       | Notes                            |
|-----------------|----------------------------------|
| `tag_id` *int*  | The tag to be updated            |
| `active` *bool* | Whether the tag is active or not |


## Group tag delete

```shell
curl "<%= config[:endpoint] %>/group/1/tag/delete" \
-H "Authorization: your_token_here"
-d "id=1"
```

Deletes a tag for the group, it is recommended to use the update function to disable active status for the tag,
because deleting the tag will affect delegate relations, use this only when nessesary.

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/tag/delete`

### Query Parameters
| Parameter  | Notes                 |
|------------|-----------------------|
| `id` *int* | The tag to be deleted |


## Group delegate pool list

```shell
curl "<%= config[:endpoint] %>/group/1/delegate/pools" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "delegates": {
        "delegate_id": 1,
        "group_user_id": 1,
        "user_id": 1
      },
      ...
    }
    ...
  ]
}
```

Lists all delegate pools within the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/delegate/pools`

### Query Parameters
| Parameter                       | Notes             |
|---------------------------------|-------------------|
| `id` *int, optional*            | The delegate id   |
| `group_user_id` *int, optional* | The group user id |
| `user_id` *int, optional*       | The user id       |


## Group delegate pool create

```shell
curl "<%= config[:endpoint] %>/group/1/delegate/pool/create" \
-H "Authorization: your_token_here"
```

Creates a delegate pool for the current user in group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/delegate/pool/create`


## Group delegate pool delete

```shell
curl "<%= config[:endpoint] %>/group/1/delegate/pool/delete" \
-H "Authorization: your_token_here"
```

Delete a delegate pool for the current user in group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/delegate/pool/delete`


## Group user delegate list

```shell
curl "<%= config[:endpoint] %>/group/1/delegates" \
-H "Authorization: your_token_here"
```

> The above command returns JSON structured like this:

```json
{
  "data": [
    {
      "id": 1,
      "tags": ["Neko", "Worker"],
      "delegate": 4
    }
  ]
}
```

Lists all delegate relations for the current user within the group

### HTTP Request
`GET <%= config[:endpoint] %>/group/<id>/delegates`

### Query Parameters
| Parameter                                 | Notes                                         |
|-------------------------------------------|-----------------------------------------------|
| `delegate_id` *int, optional*             | The delegate id                               |
| `delegate_user_id` *int, optional*        | The delegate user id                          |
| `delegate_name__iconains` *str, optional* | Delegate username contains (case-insensitive) |
| `tag_id` *int, optional*                  | The tag id                                    |
| `tag_name` *str, optional*                | The name of the tag, must be exact            |
| `tag_name__icontains` *str, optional*     | Tag name contains (case-insensitive)          |


## Group user delegate create

```shell
curl "<%= config[:endpoint] %>/group/1/delegate/create" \
-H "Authorization: your_token_here" \
-d "tag_name=Neko"
```

Creates a delegate relation for the current user in group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/delegate/create`

### Query Parameters
| Parameter           | Notes                                                                                                                                                                                |
|---------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| `delegate_id` *int* | The id of the delegate pool Accessible through the [group delegate pool list](#group-delegate-pool-list) `id` parameter                                                              |
| `tags` *array(int)* | List of tag id's that'll be bound to the delegate relation, available tags are accessible through [group tags list](#group-tags-list), make sure to mark `active=false` upon search. |



## Group user delegate update

```shell
curl "<%= config[:endpoint] %>/group/1/delegate/update" \
-H "Authorization: your_token_here" \
-d "id=1" \
-d "active=false"
```

Updates a Delegate relation for the current user in group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/delegate/update`

### Query Parameters
| Parameter           | Notes                                             |
|---------------------|---------------------------------------------------|
| `id` *int*          | The delegate pool id                              |
| `tags` *array(int)* | List of tag id's, this will reset previous values |


## Group user delegate delete

```shell
curl "<%= config[:endpoint] %>/group/1/delegate/delete" \
-H "Authorization: your_token_here"
-d "id=1"
```

Deletes a delegate id for the current user in group

### HTTP Request
`POST <%= config[:endpoint] %>/group/<id>/delegate/delete`

### Query Parameters
| Parameter  | Notes                              |
|------------|------------------------------------|
| `id` *int* | The delegate pool id to be deleted |
